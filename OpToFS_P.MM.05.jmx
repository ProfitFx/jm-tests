<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Первоначальная загрузка ОП 31" enabled="true">
      <stringProp name="TestPlan.comments">Проверка первичной загрузки</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="testMessagePath" elementType="Argument">
            <stringProp name="Argument.name">testMessagePath</stringProp>
            <stringProp name="Argument.value">../../TestData/OP31/OPFS/Messages/</stringProp>
            <stringProp name="Argument.desc">Путь к директории с сообщениями</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tempMessagePath" elementType="Argument">
            <stringProp name="Argument.name">tempMessagePath</stringProp>
            <stringProp name="Argument.value">../../TestData/OP31/OPFS/Temp/</stringProp>
            <stringProp name="Argument.desc">Путь к директории для временного хранения файлов</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="processPrefix" elementType="Argument">
            <stringProp name="Argument.name">processPrefix</stringProp>
            <stringProp name="Argument.value">MM05</stringProp>
            <stringProp name="Argument.desc">Префикс для ОП - часть имени выходного файла</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="talendPassword" elementType="Argument">
            <stringProp name="Argument.name">talendPassword</stringProp>
            <stringProp name="Argument.value">1qazxsw2</stringProp>
            <stringProp name="Argument.desc">1qazxsw2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="talendinBound" elementType="Argument">
            <stringProp name="Argument.name">talendinBound</stringProp>
            <stringProp name="Argument.value">${__property(talend.inBound)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">talend@impop-nsi-stand:/home/talend/NSITempData/InBound/</stringProp>
          </elementProp>
          <elementProp name="talendProtocol" elementType="Argument">
            <stringProp name="Argument.name">talendProtocol</stringProp>
            <stringProp name="Argument.value">${__property(talend.Protocol)}</stringProp>
            <stringProp name="Argument.desc">talend@impop-nsi-stand:/home/talend/NSITempData/Protocol/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="talendOutput" elementType="Argument">
            <stringProp name="Argument.name">talendOutput</stringProp>
            <stringProp name="Argument.value">${__property(talend.Output)}</stringProp>
            <stringProp name="Argument.desc">talend@impop-nsi-stand:/home/talend/NSITempData/Output/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="timeOut" elementType="Argument">
            <stringProp name="Argument.name">timeOut</stringProp>
            <stringProp name="Argument.value">15</stringProp>
            <stringProp name="Argument.desc">Время, после которого будет попытка чтения файлв протокола</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1429885544000</longProp>
        <longProp name="ThreadGroup.end_time">1429885544000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Корректные сообщения" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Корректное сообщение 0" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000.xml&apos; //Имя файла
testPrefix = &apos;0100&apos; // 01 - корректное сообщение  00 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1898966028">Единая база данных обновлена</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Корректное сообщение 1" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_1.xml&apos; //Имя файла
testPrefix = &apos;0101&apos; // 01 - корректное сообщение  01 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1898966028">Единая база данных обновлена</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Корректное сообщение 2" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_2.xml&apos; //Имя файла
testPrefix = &apos;0102&apos; // 01 - корректное сообщение  02 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1898966028">Единая база данных обновлена</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Корректное сообщение 3" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_3.xml&apos; //Имя файла
testPrefix = &apos;0103&apos; // 01 - корректное сообщение  03 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1898966028">Единая база данных обновлена</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 1 (не проверяем)" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_1.xml&apos; //Имя файла
testPrefix = &apos;0201&apos; // 02 - флк  01 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1537">01</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 2" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_2.xml&apos; //Имя файла
testPrefix = &apos;0202&apos; // 02 - флк  02 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1538">02</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 3" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_3.xml&apos; //Имя файла
testPrefix = &apos;0203&apos; // 02 - флк  03 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1539">03</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 4" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_4.xml&apos; //Имя файла
testPrefix = &apos;0204&apos; // 02 - флк  04 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1540">04</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 5" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_5.xml&apos; //Имя файла
testPrefix = &apos;0205&apos; // 02 - флк  05 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1541">05</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 6" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_6.xml&apos; //Имя файла
testPrefix = &apos;0206&apos; // 02 - флк  06 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1542">06</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 7 (не проверяем)" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_7.xml&apos; //Имя файла
testPrefix = &apos;0207&apos; // 02 - флк  07 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1543">07</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 8" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_8.xml&apos; //Имя файла
testPrefix = &apos;0208&apos; // 02 - флк  08 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1544">08</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 9" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_9.xml&apos; //Имя файла
testPrefix = &apos;0209&apos; // 02 - флк  09 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1545">09</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 10" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_10.xml&apos; //Имя файла
testPrefix = &apos;0210&apos; // 02 - флк  10 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1567">10</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 11 (не проверяем)" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_11.xml&apos; //Имя файла
testPrefix = &apos;0211&apos; // 02 - флк  11 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1568">11</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 12 (не проверяем)" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_12.xml&apos; //Имя файла
testPrefix = &apos;0212&apos; // 02 - флк  12 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1569">12</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 13" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_13.xml&apos; //Имя файла
testPrefix = &apos;0213&apos; // 02 - флк  13 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1570">13</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ФЛК 14" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Определение переменных" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">fileName = &apos;MSG_000_FLC_14.xml&apos; //Имя файла
testPrefix = &apos;0214&apos; // 02 - флк  14 - номер среди сообщений

vars.put(&quot;fileName&quot;, fileName)
vars.put(&quot;testPrefix&quot;, testPrefix)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Запись сообщения ${fileName} в файл" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">path=&apos;${testMessagePath}&apos; + &apos;${fileName}&apos; 

inFile = new File(path)
log.info(&quot;Load file &quot; + inFile.name)
//date = new Date(System.currentTimeMillis() - 3600 * 1000).format(&quot;yyyyMMddHHmm&quot;)
//date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)

outFileName = &apos;R${processPrefix}_RU${testPrefix}&apos; + uniqID
vars.put(&quot;outFileName&quot;, outFileName)

xmlFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;
vars.put(&quot;xmlFileName&quot;, xmlFileName)
log.info(&apos;Имя выходного файла -&apos; +  xmlFileName)

zipFileName = &apos;${tempMessagePath}&apos; + outFileName + &apos;.zip&apos;
vars.put(&quot;zipFileName&quot;, zipFileName)	
log.info(&apos;Имя выходного файла &apos;+ zipFileName)

path=&apos;${tempMessagePath}&apos; + outFileName + &apos;.xml&apos;

def pw = new File(path).newPrintWriter()
//inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())).replaceFirst(&apos;RU123456789&apos;,&apos;RU1&apos; + uniqID))}
inFile.eachLine { line -&gt; pw.println(line.replaceFirst(&apos;..__UUID}&apos;, (UUID.randomUUID().toString())))}

pw.close()
</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Упаковка сообщения ${outFileName} в архив" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd </stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">7z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-tzip</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${xmlFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">7z a -tzip $FullZipFile $FullOutFile</stringProp>
            </SystemSampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла на удаленную машину и ожидание ${timeOut} секунд" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${zipFileName}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendinBound}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Ожидание ${timeOut} секунд" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">${timeOut}000</stringProp>
            </TestAction>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Protocol)" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command">cmd</stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">/c</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">pscp</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">-pw</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendPassword}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${talendProtocol}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Argument">
                    <stringProp name="Argument.name"></stringProp>
                    <stringProp name="Argument.value">${tempMessagePath}${outFileName}.txt</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
              <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
            </SystemSampler>
            <hashTree/>
            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение протокола" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${tempMessagePath}${outFileName}.txt&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;protocolFileContent&quot;, fileContents)</stringProp>
            </BSFSampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое протокола для ${outFileName}" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA"></stringProp>
              <stringProp name="RESPONSE_DATA">${protocolFileContent}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-57884010">EDocId	Code	Description	Details	Reference</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="634620610">Ошибка контроля</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1571">14</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <objProp>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Tmp" enabled="false"/>
        <hashTree>
          <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Копирование файла с удаленной машины(из Output)" enabled="false">
            <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
            <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
            <stringProp name="SystemSampler.command">cmd</stringProp>
            <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">/c</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">pscp</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">-pw</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">${talendPassword}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">${talendOutput}${outFileName}.xml</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="" elementType="Argument">
                  <stringProp name="Argument.name"></stringProp>
                  <stringProp name="Argument.value">${testMessagePath}${outFileName}.resp.xml</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SystemSampler.directory"></stringProp>
            <stringProp name="TestPlan.comments">/home/talend/NSITempData/Output</stringProp>
          </SystemSampler>
          <hashTree/>
          <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Чтение ответа" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">// Перебираем файлы xml из директории и заменяем в них uuid - вставляем в переменную с именем файла
// Для сообщений берется имя без расширения, для FLC - Обрезается все до FLC - для единообразия в ФЛК сценариях
protocolFile = new File(&apos;${testMessagePath}${outFileName}.resp.xml&apos;)
fileContents = &quot;&quot;
protocolFile.eachLine { line -&gt; fileContents = fileContents + line }
vars.put (&quot;respFileContent&quot;, fileContents)
</stringProp>
          </BSFSampler>
          <hashTree/>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Содержимое ответа" enabled="false">
            <boolProp name="WAITING">true</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="RESPONSE_DATA">${respFileContent}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
            <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Задание имени файлов" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">date = new Date(System.currentTimeMillis()).format(&quot;yyyyMMddHHmm&quot;)
uniqID = new Date(System.currentTimeMillis()).format(&quot;MMddHHmm&quot;)
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
